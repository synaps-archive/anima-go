syntax = "proto3";

package anima;
option go_package="protocol/;protocol";

message Empty {}

message IssueRequest {
    IssDocument document = 1;
    map<string, IssAttribute> attributes = 2;
    IssProof proof = 3;
}

message IssDocument {
    string specs = 1;
    int64 issued_at = 2;
    int64 expires_at = 3;
    map<string, IssDocumentAttribute> attributes = 4;
    AnimaOwner owner = 5;
    IssAuthorization authorization = 6;
}

message IssAuthorization {
    string specs = 1;
    string content = 2;
    string signature = 3;
}

message IssDocumentAttribute {
    IssDocumentAttributeContent content = 1;
    IssDocumentAttributeCredential credential = 2;
}

message IssDocumentAttributeContent {
    string value = 1;
    string type = 2;
    string format = 3;
    string name = 4;
    AnimaOwner owner = 5;
    IssAuthorization authorization = 6;
}

message IssDocumentAttributeCredential {
    string specs = 1;
    string id = 2;
}

message IssAttribute {
    bytes value = 1;
    IssDocumentAttributeContent content = 2;
    IssAttributeCredential credential = 3;
}

message IssAttributeCredential {
    IssAttributeCredentialContent content = 1;
    string signature = 2;
}

message IssAttributeCredentialContent {
    int64 issued_at = 1;
    int64 expires_at = 2;
    string hash = 6;
    AnimaOwner owner = 8;
    AnimaIssuer issuer = 9;
    IssAttributeCredentialContentDocument document = 10;
    IssAttributeCredentialContentAttribute attribute = 11;
    IssAttributeCredentialContentProof proof = 12;
}

message IssAttributeCredentialContentDocument {
    string id = 1;
    string specs = 2;
}

message IssAttributeCredentialContentProof {
    string id = 1;
    string specs = 2;
}

message IssAttributeCredentialContentAttribute {
    string id = 1;
    string specs = 2;
}

message IssProof {
    string specs = 1;
    string content = 2;
    string signature = 3;
}

message VerifyRequest {
    string schema = 1;
    string content = 2;
    string signature = 3;
}

message VerifyResponse {
    string schema = 1;
    VerificationContent content = 2;
    string signature = 3;
}

message VerificationContent {
    AnimaVerifier verifier = 1;
    AnimaOwner owner = 2;
    AnimaIssuer issuer = 3;
    AnimaProtocol protocol = 4;
    VerificationProof proof = 5;
    VerificationResource resource = 6;
    SharingAuthorization authorization = 7;
}

message SharingAuthorization {
    string schema = 1;
    string content = 2;
    string signature = 3;
}

message VerificationResource {
    string id = 1;
    string credential = 2;
    int64 expires_at = 3;
    int64 issued_at = 4;
    int64 shared_at = 5;
    int64 verified_at = 6;
    string type = 7;
    map<string, AnimaCredentialAttribute> attributes = 8;
}

message AnimaCredentialAttribute {
    AnimaCredentialAttributeContent content = 1;
    string signature = 2;
}

message AnimaCredentialAttributeContent {
    AnimaCredentialAttributeResource resource = 1;
    Attribute attribute = 2;
    AnimaOwner owner = 3;
    AnimaIssuer issuer = 4;
}

message AnimaCredentialAttributeResource {
    string id = 1;
    int64 expires_at = 2;
}

message Attribute {
    string name = 1;
    string type = 2;
    string value = 3;
}


message VerificationProof {
    string schema = 1;
    string content = 2;
    string data = 3;
    string signature = 4;
}

message AnimaVerifier {
    string id = 1;
    string public_address = 2;
    string chain = 3;

}

message AnimaOwner {
    string id = 1;
    string public_address = 2;
    string chain = 3;
    string wallet = 4;
}

message AnimaProtocol {
    string id = 1;
    string public_address = 2;
    string chain = 3;    
}

message AnimaIssuer {
    string id = 1;
    string public_address = 2;
    string chain = 3;    
}

message RegisterVerifierRequest {
    string id = 1;
    string public_address = 2;
    string chain = 3;
}

message RegisterVerifierResponse {
    string id = 1;
}

service Anima {
    rpc Issue(IssueRequest) returns (Empty) {};
    rpc Verify(VerifyRequest) returns (VerifyResponse) {};
    rpc RegisterVerifier(RegisterVerifierRequest) returns (RegisterVerifierResponse) {};
}